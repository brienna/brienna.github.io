<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>briennakh</title>
    <description></description>
    <link>http://briennakh.github.io</link>
    
      
        <item>
          <title>ISTE-608 Study Guide, Part 2</title>
          <description>&lt;p&gt;&lt;em&gt;This post is the second in a series that serves as a study guide for the ISTE-608 waiver exam at the Rochester Institute of Technology.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;written-exam-cont&quot;&gt;WRITTEN EXAM, CONT.&lt;/h3&gt;

&lt;h3 id=&quot;state-what-data-modeling-is-and-why-it-is-important&quot;&gt;State what data modeling is and why it is important.&lt;/h3&gt;

&lt;p&gt;Data modeling describes the logical structure of a database. It is an important step in database design and implementation, since the data model is used as the basis for the creation of the physical structure.&lt;/p&gt;

&lt;p&gt;The Entity-Relationship Model (ERM) is the widely accepted standard for data modeling. Normally represented in an Entity-Relationship Diagram (ERD), the ERM uses graphical representations to model the database’s main components: entities, attributes, and relationships.&lt;/p&gt;

&lt;h3 id=&quot;define-and-contrast-the-terms-relation-attribute-and-tuples-as-they-pertain-to-the-relational-model&quot;&gt;&lt;strong&gt;Define and contrast the terms Relation, Attribute, and Tuples, as they pertain to the relational model.&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Relation — (table) a set of tuples that have the same attributes, represents an entity class.&lt;/p&gt;

&lt;p&gt;Attribute — (column) a name paired with a data type (or domain), represents a property of the entity.&lt;/p&gt;

&lt;p&gt;Tuple — (row) a set of attribute values, represents an entity instance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ISTE-208 study guide/relational database terms.png&quot; alt=&quot;relational model terms&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;describe-and-identify-the-difference-between-an-entity-class-and-an-entity-instance&quot;&gt;Describe and identify the difference between an Entity Class and an Entity Instance.&lt;/h3&gt;

&lt;p&gt;An entity class, is a group of entities of the same type, whereas an entity instance is a particular entity.&lt;/p&gt;

&lt;p&gt;In the relational database, an entity class is mapped to a table, and an entity instance corresponds to a tuple.&lt;/p&gt;

&lt;h3 id=&quot;recognize-the-following-when-given-an-er-diagram-and-state-what-the-meaning-is-entity-attribute-simple-vs-composite-single-valued-vs-multi-valued-stored-vs-derived-and-identifier&quot;&gt;Recognize the following, when given an ER diagram, and state what the meaning is: Entity, Attribute (simple vs composite; single-valued vs multi-valued, stored vs derived, and identifier).&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ISTE-208 study guide/attributes.png&quot; alt=&quot;types of attributes&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Entity — Real-world object or concept.&lt;/p&gt;

&lt;p&gt;Attribute — Descriptive property of the entity.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Types of attributes:&lt;/u&gt;&lt;br /&gt;
Simple attribute — Atomic.&lt;/p&gt;

&lt;p&gt;Composite attribute — Contains sub-attributes.&lt;/p&gt;

&lt;p&gt;Single-valued attribute — Contains a single value.&lt;/p&gt;

&lt;p&gt;Multi-valued attribute — Contains multiple values.&lt;/p&gt;

&lt;p&gt;Stored attribute — Value is physically stored in the database.&lt;/p&gt;

&lt;p&gt;Derived attribute — Value is derived from other attributes.&lt;/p&gt;

&lt;p&gt;Identifier attribute — Uniquely identifies a particular entity instance.&lt;/p&gt;

&lt;h3 id=&quot;describe-what-an-identifier-is-and-its-usage&quot;&gt;Describe what an identifier is and its usage.&lt;/h3&gt;

&lt;p&gt;An identifier, or primary key, is an attribute(s) whose value is unique for each entity instance and thus identifies that particular entity instance.&lt;/p&gt;

&lt;h3 id=&quot;describe-a-composite-identifier&quot;&gt;Describe a composite identifier.&lt;/h3&gt;

&lt;p&gt;A simple identifier is composed of a single attribute, whereas a composite identifier, or composite key, is a set of attributes.&lt;/p&gt;

&lt;h3 id=&quot;transpose-an-er-diagram-with-chen-or-crows-feet-notation-of-a-single-entity-into-a-relation&quot;&gt;Transpose an ER diagram, with Chen or Crow’s Feet notation, of a single entity into a relation.&lt;/h3&gt;

&lt;p&gt;&lt;u&gt;Guidelines:&lt;/u&gt;&lt;br /&gt;
Each entity always corresponds to a relation.&lt;/p&gt;

&lt;p&gt;Simple attributes correspond to columns, with the identifier attribute(s) underlined.&lt;/p&gt;

&lt;p&gt;Composite attributes are merged into the same relation the same way as simple attributes.&lt;/p&gt;

&lt;p&gt;Multi-valued attributes get their own relations. Within each new relation, add the identifier attribute of the parent entity as a foreign key. Don’t forget to underline an identifier attribute for the new relation itself as well.&lt;/p&gt;

&lt;p&gt;Derived attributes can be ignored, since they are not physically stored in the database.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;ER diagram, with Chen notation:&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ISTE-208 study guide/ER-diagram.png&quot; alt=&quot;types of attributes&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Relations:&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;Person(&lt;u&gt;SSN&lt;/u&gt;, FirstName, LastName, Address, Birthdate)&lt;/p&gt;

&lt;p&gt;Hobby(&lt;u&gt;SSN&lt;/u&gt;, &lt;u&gt;Hobby&lt;/u&gt;)&lt;/p&gt;

</description>
          <pubDate>2017-06-04T00:00:00-04:00</pubDate>
          <link>http://briennakh.github.io/notes/ISTE-208-study-guide-part-2</link>
          <guid isPermaLink="true">http://briennakh.github.io/notes/ISTE-208-study-guide-part-2</guid>
        </item>
      
    
      
        <item>
          <title>Compiling and running a Java package from the command line</title>
          <description>&lt;p&gt;Up to this point, my experience with Java and the command line has covered only classes in unnamed, or default, packages. Now I’m coding a named package to process DNA sequence alignments, and it took me a while to grasp how to properly compile and run my code from the command line.&lt;/p&gt;

&lt;p&gt;I named my package &lt;code class=&quot;highlighter-rouge&quot;&gt;alignmentparser&lt;/code&gt; and set its directory structure as&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root]
    alignmentparser
        |_____ Subject.java
        |_____ TestRunner.java
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At the top of each Java file, I added the package statement &lt;code class=&quot;highlighter-rouge&quot;&gt;package alignmentparser&lt;/code&gt;, the package name corresponding to the directory structure relative to the file.&lt;/p&gt;

&lt;p&gt;My first attempt at compiling &lt;code class=&quot;highlighter-rouge&quot;&gt;TestRunner&lt;/code&gt;, which includes a dependency on &lt;code class=&quot;highlighter-rouge&quot;&gt;Subject&lt;/code&gt;, resulted in errors indicating that the compiler was not finding &lt;code class=&quot;highlighter-rouge&quot;&gt;Subject&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Briennas-MacBook-2:alignmentparser Brienna$ javac TestRunner.java
TestRunner.java:9: error: cannot find symbol
  private Subject subj = new Subject(&quot;NM_080704&quot;, 1710, 2495);
          ^
  symbol:   class Subject
  location: class TestRunner
TestRunner.java:9: error: cannot find symbol
  private Subject subj = new Subject(&quot;NM_080704&quot;, 1710, 2495);
                             ^
  symbol:   class Subject
  location: class TestRunner
2 errors
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After digging through online resources and enlisting the help of a friend (who asked me why in the world I wasn’t using an IDE like any sane person would), I chanced upon something that worked — going up one level in my working directory and compiling from there instead.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Briennas-MacBook-2:GitHub repositories Brienna$ javac alignmentparser/TestRunner.java
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The reason why I messed up my first attempt at compiling &lt;code class=&quot;highlighter-rouge&quot;&gt;TestRunner&lt;/code&gt; was because of something called the class path. The class path is the location where the compiler begins its search. It defaults to the current working directory. So when I compiled &lt;code class=&quot;highlighter-rouge&quot;&gt;TestRunner&lt;/code&gt; while in the &lt;code class=&quot;highlighter-rouge&quot;&gt;alignmentparser&lt;/code&gt; directory, the class path defaulted to &lt;code class=&quot;highlighter-rouge&quot;&gt;[root]/alignmentparser&lt;/code&gt;. Then when the compiler encountered the reference to &lt;code class=&quot;highlighter-rouge&quot;&gt;Subject&lt;/code&gt;, it began its search for that class by appending &lt;code class=&quot;highlighter-rouge&quot;&gt;Subject&lt;/code&gt;’s package declaration to the default class path, making the class path now &lt;code class=&quot;highlighter-rouge&quot;&gt;[root]/alignmentparser/alignmentparser&lt;/code&gt;. This path does not exist, hence the compilation errors.&lt;/p&gt;

&lt;p&gt;Going up a directory worked, because there, the class path defaults to &lt;code class=&quot;highlighter-rouge&quot;&gt;[root]&lt;/code&gt;. Then when I compiled &lt;code class=&quot;highlighter-rouge&quot;&gt;TestRunner&lt;/code&gt; and the compiler encountered the reference to &lt;code class=&quot;highlighter-rouge&quot;&gt;Subject&lt;/code&gt;, it appended &lt;code class=&quot;highlighter-rouge&quot;&gt;Subject&lt;/code&gt;’s package declaration to the default class path, making the class path now &lt;code class=&quot;highlighter-rouge&quot;&gt;[root]/alignmentparser&lt;/code&gt;. This path exists, so compilation succeeds.&lt;/p&gt;

&lt;h3 id=&quot;to-compile-a-file-within-a-named-package&quot;&gt;To compile a file within a named package:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Compile from outside the package itself, due to the package statement getting appended to the default class path.&lt;/li&gt;
  &lt;li&gt;Compile from anywhere but set the class path explicitly to the root folder, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Briennas-MacBook-2:alignmentparser Brienna$ javac -cp .. TestRunner.java&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also, the compilation of multiple files can be specified in just one command: &lt;code class=&quot;highlighter-rouge&quot;&gt;javac FileName1.java FileName2.java&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;javac *.java&lt;/code&gt;. When you compile one file, all of its dependencies will compile too.&lt;/p&gt;

&lt;p&gt;To run a compiled class, follow the same rules with compiling, but use a period instead of a slash to represent directory levels, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;alignmentparser.TestRunner&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;alignmentparser/TestRunner&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;helpful-resources&quot;&gt;Helpful resources:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;http://docs.oracle.com/javase/7/docs/technotes/tools/windows/classpath.html&lt;/li&gt;
  &lt;li&gt;http://www.kevinboone.net/classpath.html&lt;/li&gt;
&lt;/ul&gt;

</description>
          <pubDate>2017-02-09T00:00:00-05:00</pubDate>
          <link>http://briennakh.github.io/notes/Compiling-and-running</link>
          <guid isPermaLink="true">http://briennakh.github.io/notes/Compiling-and-running</guid>
        </item>
      
    
      
        <item>
          <title>Beware of slow console logs</title>
          <description>&lt;p&gt;JavaScript being silly? &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But console logging is not perfect, which I realized the other day when helping &lt;a href=&quot;https://github.com/Gregb1609&quot;&gt;Gregb1609&lt;/a&gt; on FreeCodeCamp’s Gitter chat. He was working on an intermediate algorithm scripting problem called &lt;a href=&quot;https://www.freecodecamp.com/challenges/sum-all-primes&quot;&gt;Sum All Primes&lt;/a&gt;, where you’re supposed to sum all the prime numbers up to and including the provided number. His solution worked with lower numbers, like 10, but lagged badly with higher numbers, like 977.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sumPrimes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modulo i&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; j&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;multiple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;not prime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;multiple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;multiple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;sumPrimes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// works fine&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;sumPrimes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;977&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// lags badly&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When I took a look at his code, it looked fine. No obvious bugs. So using a sort of elimination method, I gradually reformatted my own solution to the problem, which worked, to match his. In doing so, I realized that the only true difference between his and my code was that he console logged while I didn’t.&lt;/p&gt;

&lt;p&gt;I commented out his &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt;s and voilà! His code now worked with higher numbers.&lt;/p&gt;

&lt;p&gt;Gregb1609’s case was extreme, but it showed me that console logging really slows down a program’s execution. To prevent giving up performance for nothing, I’ll have to remember to comment out any console log statements before I push code to production.&lt;/p&gt;
</description>
          <pubDate>2016-09-28T00:00:00-04:00</pubDate>
          <link>http://briennakh.github.io/notes/beware-of-slow-console-logs</link>
          <guid isPermaLink="true">http://briennakh.github.io/notes/beware-of-slow-console-logs</guid>
        </item>
      
    
  </channel>
</rss>
